<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>KYLE WALKER DATA</title>
    <link>https://walkerke.github.io/tags/tidycensus/index.xml</link>
    <description>Recent content on KYLE WALKER DATA</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>kwalkerdata@gmail.com (Kyle Walker)</managingEditor>
    <webMaster>kwalkerdata@gmail.com (Kyle Walker)</webMaster>
    <copyright>(c) 2017 Kyle Walker</copyright>
    <atom:link href="https://walkerke.github.io/tags/tidycensus/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Compare US metropolitan area characteristics in R with tidycensus and tigris</title>
      <link>https://walkerke.github.io/2017/06/comparing-metros/</link>
      <pubDate>Sun, 25 Jun 2017 08:00:00 +0000</pubDate>
      <author>kwalkerdata@gmail.com (Kyle Walker)</author>
      <guid>https://walkerke.github.io/2017/06/comparing-metros/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;ul&gt;
&lt;li&gt;Interested in more tips on working with Census data? &lt;a href=&#34;http://eepurl.com/cPGKZD&#34;&gt;Click here to join my email list!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Want to implement this in your organization? Contact me at &lt;a href=&#34;mailto:kwalkerdata@gmail.com&#34;&gt;kwalkerdata@gmail.com&lt;/a&gt; to discuss a training or consulting partnership.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As I’ve discussed &lt;a href=&#34;https://walkerke.github.io/2017/05/tigris-metros/&#34;&gt;in a previous post&lt;/a&gt;, practitioners commonly analyze demographic or economic topics at the scale of the metropolitan area. Since I wrote that post, I’ve released the &lt;a href=&#34;https://walkerke.github.io/tidycensus&#34;&gt;tidycensus&lt;/a&gt; package, giving R users access to linked Census geometry and attributes in a single function call. This makes metropolitan area analysis even faster, with help from the &lt;strong&gt;tigris&lt;/strong&gt; and &lt;strong&gt;sf&lt;/strong&gt; packages.&lt;/p&gt;
&lt;p&gt;First, we load up some packages and set some options.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidycensus)
library(tidyverse)
library(tigris)
library(sf)
options(tigris_class = &amp;quot;sf&amp;quot;)
options(tigris_use_cache = TRUE)
# census_api_key(&amp;quot;YOUR KEY HERE&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s say you are an analyst who wants to compare the distribution of median gross rent by Census tract for three West Coast metropolitan areas: Seattle, Portland, and San Francisco-Oakland. We’ll get data from the 2011-2015 American Community Survey’s Data Profile, using variable &lt;code&gt;DP04_0134&lt;/code&gt;. As this requires data for multiple states, we’ll use a new feature in tidycensus that allows us to supply a vector of states to the &lt;code&gt;state&lt;/code&gt; parameter in &lt;code&gt;get_acs()&lt;/code&gt; for Census tracts, improving on the approach I outlined &lt;a href=&#34;http://walkerke.github.io/2017/05/tidycensus-every-tract/&#34;&gt;in my previous post&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rent &amp;lt;- get_acs(geography = &amp;quot;tract&amp;quot;, variables = &amp;quot;DP04_0134&amp;quot;, 
                state = c(&amp;quot;WA&amp;quot;, &amp;quot;OR&amp;quot;, &amp;quot;CA&amp;quot;), geometry = TRUE)

head(rent)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Simple feature collection with 6 features and 5 fields
## geometry type:  MULTIPOLYGON
## dimension:      XY
## bbox:           xmin: -124.7625 ymin: 45.99541 xmax: -116.916 ymax: 48.35451
## epsg (SRID):    4269
## proj4string:    +proj=longlat +datum=NAD83 +no_defs
## # A tibble: 6 x 6
##         GEOID                                         NAME  variable
##         &amp;lt;chr&amp;gt;                                        &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;
## 1 53003960100 Census Tract 9601, Asotin County, Washington DP04_0134
## 2 53005011100  Census Tract 111, Benton County, Washington DP04_0134
## 3 53007960500 Census Tract 9605, Chelan County, Washington DP04_0134
## 4 53007961000 Census Tract 9610, Chelan County, Washington DP04_0134
## 5 53009000200   Census Tract 2, Clallam County, Washington DP04_0134
## 6 53009000600   Census Tract 6, Clallam County, Washington DP04_0134
## # ... with 3 more variables: estimate &amp;lt;dbl&amp;gt;, moe &amp;lt;dbl&amp;gt;,
## #   geometry &amp;lt;simple_feature&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have median gross rent information for all Census tracts in Washington, Oregon, and California. Subsetting this to our desired metropolitan areas only takes a couple steps. First, we use the tigris package to obtain metropolitan area boundaries with the &lt;code&gt;core_based_statistical_areas()&lt;/code&gt; function, taking care to set &lt;code&gt;cb = TRUE&lt;/code&gt; as this is the default geometry used by tidycensus, and subset by ID for our desired metros. Next, we use an inner spatial join with sf’s &lt;code&gt;st_join()&lt;/code&gt; function to subset for the specific tracts we need.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;metros &amp;lt;- core_based_statistical_areas(cb = TRUE) %&amp;gt;%
  filter(GEOID %in% c(&amp;quot;38900&amp;quot;, &amp;quot;41860&amp;quot;, &amp;quot;42660&amp;quot;)) %&amp;gt;%
  select(metro_name = NAME)

wc_rent &amp;lt;- st_join(rent, metros, join = st_within, 
                   left = FALSE) 

head(wc_rent)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Simple feature collection with 6 features and 6 fields
## geometry type:  MULTIPOLYGON
## dimension:      XY
## bbox:           xmin: -122.693 ymin: 45.62099 xmax: -122.2963 ymax: 47.73405
## epsg (SRID):    4269
## proj4string:    +proj=longlat +datum=NAD83 +no_defs
##          GEOID                                          NAME  variable
## 8  53011040706 Census Tract 407.06, Clark County, Washington DP04_0134
## 9  53011040910 Census Tract 409.10, Clark County, Washington DP04_0134
## 10 53011041206 Census Tract 412.06, Clark County, Washington DP04_0134
## 11 53011041700    Census Tract 417, Clark County, Washington DP04_0134
## 20 53033000200       Census Tract 2, King County, Washington DP04_0134
## 21 53033002800      Census Tract 28, King County, Washington DP04_0134
##    estimate moe                          metro_name
## 8       877  48 Portland-Vancouver-Hillsboro, OR-WA
## 9      1490 206 Portland-Vancouver-Hillsboro, OR-WA
## 10     1100 123 Portland-Vancouver-Hillsboro, OR-WA
## 11      832  32 Portland-Vancouver-Hillsboro, OR-WA
## 20     1128  63         Seattle-Tacoma-Bellevue, WA
## 21     1296 261         Seattle-Tacoma-Bellevue, WA
##                          geometry
## 8  MULTIPOLYGON(((-122.552545 ...
## 9  MULTIPOLYGON(((-122.693002 ...
## 10 MULTIPOLYGON(((-122.58041 4...
## 11 MULTIPOLYGON(((-122.651537 ...
## 20 MULTIPOLYGON(((-122.323566 ...
## 21 MULTIPOLYGON(((-122.355305 ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tracts are identified by metropolitan area, with a new column, &lt;code&gt;metro_name&lt;/code&gt;, that includes the metropolitan area name.&lt;/p&gt;
&lt;p&gt;Exploratory analysis by metropolitan area is now straightforward. We can look at faceted histograms of median gross rent by Census tract by metro area with &lt;strong&gt;ggplot2&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(wc_rent, aes(x = estimate)) + 
  geom_histogram() + 
  facet_wrap(~metro_name)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;#####../content/post/comparing-metros_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As we have feature geometry as well, we can make faceted maps with &lt;code&gt;geom_sf()&lt;/code&gt;, found in the development version of ggplot2. Be sure to set &lt;code&gt;scales = &amp;quot;free&amp;quot;&lt;/code&gt; and &lt;code&gt;theme(aspect.ratio = 1)&lt;/code&gt; if you want this to work correctly.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(viridis)

ggplot(wc_rent, aes(fill = estimate, color = estimate)) + 
  geom_sf() + 
  coord_sf(crs = 26910) + 
  facet_wrap(~metro_name, scales = &amp;quot;free&amp;quot;, nrow = 1) + 
  theme_minimal() + 
  theme(aspect.ratio = 1) + 
  scale_fill_viridis() + 
  scale_color_viridis()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;#####../content/post/comparing-metros_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;



&lt;!-- BLOGDOWN-HEAD






/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title>Getting data for every Census tract in the US with purrr and tidycensus</title>
      <link>https://walkerke.github.io/2017/05/tidycensus-every-tract/</link>
      <pubDate>Wed, 31 May 2017 08:00:00 +0000</pubDate>
      <author>kwalkerdata@gmail.com (Kyle Walker)</author>
      <guid>https://walkerke.github.io/2017/05/tidycensus-every-tract/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;p&gt;&lt;strong&gt;Interested in more tips on working with Census data? &lt;a href=&#34;http://eepurl.com/cPGKZD&#34;&gt;Click here to join my email list!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Last week, I published the development version of my new R package, &lt;strong&gt;tidycensus&lt;/strong&gt;. You can read through the documentation and some examples at &lt;a href=&#34;https://walkerke.github.io/tidycensus/&#34; class=&#34;uri&#34;&gt;https://walkerke.github.io/tidycensus/&lt;/a&gt;. I’m working on getting the package CRAN-ready with better error handling; in the meantime, I’m sharing a few examples to demonstrate its functionality.&lt;/p&gt;
&lt;p&gt;If you are working on a national project that includes demographic data as a component, you might be interested in acquiring Census tract data for the entire United States. However, Census tract data are commonly available by state (with the exception of &lt;a href=&#34;http://www.nhgis.org&#34;&gt;NHGIS&lt;/a&gt;, which is a wonderful resource), meaning that an analyst would have to spend time piecing the data together.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tidycensus&lt;/strong&gt; solves this problem directly within R with help from the &lt;strong&gt;purrr&lt;/strong&gt; package, a member of the tidyverse. In &lt;strong&gt;tidycensus&lt;/strong&gt;, there is a built-in data frame named &lt;code&gt;fips_codes&lt;/code&gt; that includes US state and county IDs; &lt;strong&gt;tidycensus&lt;/strong&gt; uses this data frame to handle translations between state/county names and FIPS codes. However, this data frame can also be used to generate a vector of state codes to be fed to the &lt;code&gt;map_df&lt;/code&gt; function in &lt;strong&gt;purrr&lt;/strong&gt;. As such, this is all it takes to get a tibble of total population estimates for all US Census tracts from the 2011-2015 ACS:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidycensus)
library(purrr)

# Un-comment below and set your API key
# census_api_key(&amp;quot;YOUR KEY GOES HERE&amp;quot;)

us &amp;lt;- unique(fips_codes$state)[1:51]

totalpop &amp;lt;- map_df(us, function(x) {
  get_acs(geography = &amp;quot;tract&amp;quot;, variables = &amp;quot;B01003_001&amp;quot;, 
          state = x)
})

str(totalpop)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Classes &amp;#39;tbl_df&amp;#39;, &amp;#39;tbl&amp;#39; and &amp;#39;data.frame&amp;#39;:    73056 obs. of  5 variables:
##  $ GEOID   : chr  &amp;quot;01001020100&amp;quot; &amp;quot;01001020200&amp;quot; &amp;quot;01001020300&amp;quot; &amp;quot;01001020400&amp;quot; ...
##  $ NAME    : chr  &amp;quot;Census Tract 201, Autauga County, Alabama&amp;quot; &amp;quot;Census Tract 202, Autauga County, Alabama&amp;quot; &amp;quot;Census Tract 203, Autauga County, Alabama&amp;quot; &amp;quot;Census Tract 204, Autauga County, Alabama&amp;quot; ...
##  $ variable: chr  &amp;quot;B01003_001&amp;quot; &amp;quot;B01003_001&amp;quot; &amp;quot;B01003_001&amp;quot; &amp;quot;B01003_001&amp;quot; ...
##  $ estimate: num  1948 2156 2968 4423 10763 ...
##  $ moe     : num  203 268 404 493 624 478 436 281 1000 535 ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Get any ACS or decennial Census data in this way.&lt;/p&gt;
&lt;p&gt;However - what if you also want tract geometry for mapping? This only requires a few small modifications. &lt;code&gt;map_df&lt;/code&gt; in &lt;strong&gt;purrr&lt;/strong&gt; uses the &lt;code&gt;bind_rows&lt;/code&gt; function under the hood, which doesn’t work with simple features objects (yet). However, &lt;strong&gt;sf&lt;/strong&gt; does have an &lt;code&gt;rbind&lt;/code&gt; method that works for &lt;code&gt;sf&lt;/code&gt; objects and can be fed to &lt;strong&gt;purrr&lt;/strong&gt;’s &lt;code&gt;reduce&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(sf)
options(tigris_use_cache = TRUE)

totalpop_sf &amp;lt;- reduce(
  map(us, function(x) {
    get_acs(geography = &amp;quot;tract&amp;quot;, variables = &amp;quot;B01003_001&amp;quot;, 
            state = x, geometry = TRUE)
  }), 
  rbind
)

str(totalpop_sf)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Classes &amp;#39;sf&amp;#39; and &amp;#39;data.frame&amp;#39;:   72843 obs. of  6 variables:
##  $ GEOID   : chr  &amp;quot;01003010500&amp;quot; &amp;quot;01003011501&amp;quot; &amp;quot;01009050500&amp;quot; &amp;quot;01015981901&amp;quot; ...
##  $ NAME    : chr  &amp;quot;Census Tract 105, Baldwin County, Alabama&amp;quot; &amp;quot;Census Tract 115.01, Baldwin County, Alabama&amp;quot; &amp;quot;Census Tract 505, Blount County, Alabama&amp;quot; &amp;quot;Census Tract 9819.01, Calhoun County, Alabama&amp;quot; ...
##  $ variable: chr  &amp;quot;B01003_001&amp;quot; &amp;quot;B01003_001&amp;quot; &amp;quot;B01003_001&amp;quot; &amp;quot;B01003_001&amp;quot; ...
##  $ estimate: num  5321 5771 7007 4 1607 ...
##  $ moe     : num  452 825 556 6 235 309 506 386 425 310 ...
##  $ geometry:sfc_GEOMETRY of length 72843; first list element: List of 1
##   ..$ :List of 1
##   .. ..$ : num [1:55, 1:2] -87.8 -87.8 -87.8 -87.8 -87.8 ...
##   ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;XY&amp;quot; &amp;quot;MULTIPOLYGON&amp;quot; &amp;quot;sfg&amp;quot;
##  - attr(*, &amp;quot;agr&amp;quot;)= Factor w/ 3 levels &amp;quot;constant&amp;quot;,&amp;quot;aggregate&amp;quot;,..: NA NA NA NA NA
##   ..- attr(*, &amp;quot;names&amp;quot;)= chr  &amp;quot;GEOID&amp;quot; &amp;quot;NAME&amp;quot; &amp;quot;variable&amp;quot; &amp;quot;estimate&amp;quot; ...
##  - attr(*, &amp;quot;sf_column&amp;quot;)= chr &amp;quot;geometry&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By declaring &lt;code&gt;geometry = TRUE&lt;/code&gt;, &lt;strong&gt;tidycensus&lt;/strong&gt; fetches tract feature geometry using the &lt;strong&gt;tigris&lt;/strong&gt; package and merges it to the ACS data automatically for you. I recommend using the caching feature in the &lt;strong&gt;tigris&lt;/strong&gt; package if you plan to use this workflow multiple times. You might note the discrepancy in tracts between the geometry-enabled and regular data frames; this is due to the removal of some water-only tracts in the cartographic boundary shapefiles used by &lt;strong&gt;tidycensus&lt;/strong&gt;.&lt;/p&gt;



&lt;!-- BLOGDOWN-HEAD






/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
  </channel>
</rss>