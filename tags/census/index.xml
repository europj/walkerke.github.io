<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>KYLE WALKER DATA</title>
    <link>/tags/census/index.xml</link>
    <description>Recent content on KYLE WALKER DATA</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>kwalkerdata@gmail.com (Kyle Walker)</managingEditor>
    <webMaster>kwalkerdata@gmail.com (Kyle Walker)</webMaster>
    <copyright>(c) 2017 Kyle Walker</copyright>
    <atom:link href="/tags/census/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Getting data for every Census tract in the US with purrr and tidycensus</title>
      <link>/2017/05/tidycensus-every-tract/</link>
      <pubDate>Wed, 31 May 2017 08:00:00 +0000</pubDate>
      <author>kwalkerdata@gmail.com (Kyle Walker)</author>
      <guid>/2017/05/tidycensus-every-tract/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;p&gt;&lt;strong&gt;Interested in more tips on working with Census data? &lt;a href=&#34;http://eepurl.com/cPGKZD&#34;&gt;Click here to join my email list!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Last week, I published the development version of my new R package, &lt;strong&gt;tidycensus&lt;/strong&gt;. You can read through the documentation and some examples at &lt;a href=&#34;https://walkerke.github.io/tidycensus/&#34; class=&#34;uri&#34;&gt;https://walkerke.github.io/tidycensus/&lt;/a&gt;. I’m working on getting the package CRAN-ready with better error handling; in the meantime, I’m sharing a few examples to demonstrate its functionality.&lt;/p&gt;
&lt;p&gt;If you are working on a national project that includes demographic data as a component, you might be interested in acquiring Census tract data for the entire United States. However, Census tract data are commonly available by state (with the exception of &lt;a href=&#34;http://www.nhgis.org&#34;&gt;NHGIS&lt;/a&gt;, which is a wonderful resource), meaning that an analyst would have to spend time piecing the data together.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tidycensus&lt;/strong&gt; solves this problem directly within R with help from the &lt;strong&gt;purrr&lt;/strong&gt; package, a member of the tidyverse. In &lt;strong&gt;tidycensus&lt;/strong&gt;, there is a built-in data frame named &lt;code&gt;fips_codes&lt;/code&gt; that includes US state and county IDs; &lt;strong&gt;tidycensus&lt;/strong&gt; uses this data frame to handle translations between state/county names and FIPS codes. However, this data frame can also be used to generate a vector of state codes to be fed to the &lt;code&gt;map_df&lt;/code&gt; function in &lt;strong&gt;purrr&lt;/strong&gt;. As such, this is all it takes to get a tibble of total population estimates for all US Census tracts from the 2011-2015 ACS:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidycensus)
library(purrr)
# Un-comment below and set your API key
# census_api_key(&amp;quot;YOUR KEY GOES HERE&amp;quot;)
us &amp;lt;- unique(fips_codes$state)[1:51]

totalpop &amp;lt;- map_df(us, function(x) {
  get_acs(geography = &amp;quot;tract&amp;quot;, variables = &amp;quot;B01003_001&amp;quot;, 
          state = x)
})

str(totalpop)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Classes &amp;#39;tbl_df&amp;#39;, &amp;#39;tbl&amp;#39; and &amp;#39;data.frame&amp;#39;:    73056 obs. of  5 variables:
##  $ GEOID   : chr  &amp;quot;01001020100&amp;quot; &amp;quot;01001020200&amp;quot; &amp;quot;01001020300&amp;quot; &amp;quot;01001020400&amp;quot; ...
##  $ NAME    : chr  &amp;quot;Census Tract 201, Autauga County, Alabama&amp;quot; &amp;quot;Census Tract 202, Autauga County, Alabama&amp;quot; &amp;quot;Census Tract 203, Autauga County, Alabama&amp;quot; &amp;quot;Census Tract 204, Autauga County, Alabama&amp;quot; ...
##  $ variable: chr  &amp;quot;B01003_001&amp;quot; &amp;quot;B01003_001&amp;quot; &amp;quot;B01003_001&amp;quot; &amp;quot;B01003_001&amp;quot; ...
##  $ estimate: num  1948 2156 2968 4423 10763 ...
##  $ moe     : num  203 268 404 493 624 478 436 281 1000 535 ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Get any ACS or decennial Census data in this way.&lt;/p&gt;
&lt;p&gt;However - what if you also want tract geometry for mapping? This only requires a few small modifications. &lt;code&gt;map_df&lt;/code&gt; in &lt;strong&gt;purrr&lt;/strong&gt; uses the &lt;code&gt;bind_rows&lt;/code&gt; function under the hood, which doesn’t work with simple features objects (yet). However, &lt;strong&gt;sf&lt;/strong&gt; does have an &lt;code&gt;rbind&lt;/code&gt; method that works for &lt;code&gt;sf&lt;/code&gt; objects and can be fed to &lt;strong&gt;purrr&lt;/strong&gt;’s &lt;code&gt;reduce&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(sf)
options(tigris_use_cache = TRUE)

totalpop_sf &amp;lt;- reduce(
  map(us, function(x) {
    get_acs(geography = &amp;quot;tract&amp;quot;, variables = &amp;quot;B01003_001&amp;quot;, 
            state = x, geometry = TRUE)
  }), 
  rbind
)

str(totalpop_sf)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Classes &amp;#39;sf&amp;#39; and &amp;#39;data.frame&amp;#39;:   72843 obs. of  6 variables:
##  $ GEOID   : chr  &amp;quot;01003010500&amp;quot; &amp;quot;01003011501&amp;quot; &amp;quot;01009050500&amp;quot; &amp;quot;01015981901&amp;quot; ...
##  $ NAME    : chr  &amp;quot;Census Tract 105, Baldwin County, Alabama&amp;quot; &amp;quot;Census Tract 115.01, Baldwin County, Alabama&amp;quot; &amp;quot;Census Tract 505, Blount County, Alabama&amp;quot; &amp;quot;Census Tract 9819.01, Calhoun County, Alabama&amp;quot; ...
##  $ variable: chr  &amp;quot;B01003_001&amp;quot; &amp;quot;B01003_001&amp;quot; &amp;quot;B01003_001&amp;quot; &amp;quot;B01003_001&amp;quot; ...
##  $ estimate: num  5321 5771 7007 4 1607 ...
##  $ moe     : num  452 825 556 6 235 309 506 386 425 310 ...
##  $ geometry:sfc_GEOMETRY of length 72843; first list element: List of 1
##   ..$ :List of 1
##   .. ..$ : num [1:55, 1:2] -87.8 -87.8 -87.8 -87.8 -87.8 ...
##   ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;XY&amp;quot; &amp;quot;MULTIPOLYGON&amp;quot; &amp;quot;sfg&amp;quot;
##  - attr(*, &amp;quot;agr&amp;quot;)= Factor w/ 3 levels &amp;quot;constant&amp;quot;,&amp;quot;aggregate&amp;quot;,..: NA NA NA NA NA
##   ..- attr(*, &amp;quot;names&amp;quot;)= chr  &amp;quot;GEOID&amp;quot; &amp;quot;NAME&amp;quot; &amp;quot;variable&amp;quot; &amp;quot;estimate&amp;quot; ...
##  - attr(*, &amp;quot;sf_column&amp;quot;)= chr &amp;quot;geometry&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By declaring &lt;code&gt;geometry = TRUE&lt;/code&gt;, &lt;strong&gt;tidycensus&lt;/strong&gt; fetches tract feature geometry using the &lt;strong&gt;tigris&lt;/strong&gt; package and merges it to the ACS data automatically for you. I recommend using the caching feature in the &lt;strong&gt;tigris&lt;/strong&gt; package if you plan to use this workflow multiple times. You might note the discrepancy in tracts between the geometry-enabled and regular data frames; this is due to the removal of some water-only tracts in the cartographic boundary shapefiles used by &lt;strong&gt;tidycensus&lt;/strong&gt;.&lt;/p&gt;



&lt;!-- BLOGDOWN-HEAD






/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title>Generating metropolitan subsets of Census data with R and tigris</title>
      <link>/2017/05/tigris-metros/</link>
      <pubDate>Thu, 18 May 2017 08:00:00 +0000</pubDate>
      <author>kwalkerdata@gmail.com (Kyle Walker)</author>
      <guid>/2017/05/tigris-metros/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;p&gt;&lt;strong&gt;Need help working with Census data in your project? Contact me at &lt;a href=&#34;mailto:kwalkerdata@gmail.com&#34;&gt;kwalkerdata@gmail.com&lt;/a&gt; to discuss consulting support or a training workshop!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Commonly, studies that use US Census data focus on topics at the scale of the metropolitan area. However, subsetting Census geographic data by metropolitan area is not always straightforward. Such a workflow for Census tracts might look something like:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Manually downloading Census tract shapefiles (often available by state);&lt;/li&gt;
&lt;li&gt;Looking up the counties in a given metropolitan area, along with their FIPS codes;&lt;/li&gt;
&lt;li&gt;Subsetting the data by those FIPS codes.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Repeating the process for each state included in the metropolitan area and then merging the result (if tracts are obtained by state).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This task - which can be tedious - is well-suited for R and the &lt;strong&gt;tigris&lt;/strong&gt; package. R, by way of the &lt;strong&gt;sf&lt;/strong&gt; package, has powerful functionality for spatial subsetting. Further, with a little custom code, we can set up a framework for rapidly retrieving Census tracts for any metropolitan area we want. To get started, let’s load the required packages and set options to cache data from &lt;strong&gt;tigris&lt;/strong&gt; and load the data as &lt;strong&gt;sf&lt;/strong&gt; objects.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tigris)
library(sf)
library(tidyverse)
options(tigris_class = &amp;quot;sf&amp;quot;)
options(tigris_use_cache = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s say we want to obtain Census tracts for the Portland, Oregon metropolitan area, which includes areas in both Oregon and Washington. We can fetch Census tracts for Oregon and Washington and combine them with the &lt;code&gt;rbind_tigris&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;orwa &amp;lt;- rbind_tigris(
  tracts(&amp;quot;OR&amp;quot;, cb = TRUE), 
  tracts(&amp;quot;WA&amp;quot;, cb = TRUE)
)

ggplot(orwa) + geom_sf()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=https://walkerke.github.io/img/2017/tigris-metros/f1.png style=&#34;width: 85%&#34;&gt;&lt;/p&gt;
&lt;p&gt;We can then subset these tracts spatially by locating the boundary of the Portland metropolitan area available in the &lt;code&gt;core_based_statistical_areas&lt;/code&gt; function. Use the &lt;code&gt;View&lt;/code&gt; function in RStudio and browse the dataset if you are unsure of how to format the string used to filter the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cb &amp;lt;- core_based_statistical_areas(cb = TRUE)

pdx &amp;lt;- filter(cb, grepl(&amp;quot;Portland-Vancouver&amp;quot;, NAME))

ggplot(pdx) + geom_sf()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=https://walkerke.github.io/img/2017/tigris-metros/f2.png style=&#34;width: 85%&#34;&gt;&lt;/p&gt;
&lt;p&gt;The simplest way to do spatial subsetting in &lt;strong&gt;sf&lt;/strong&gt; is by indexing the data you’d like to subset by the spatial overlay. This will return all tracts that intersect the metropolitan area.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p1 &amp;lt;- orwa[pdx,]

ggplot() + 
  geom_sf(data = p1) + 
  geom_sf(data = pdx, fill = NA, color = &amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=https://walkerke.github.io/img/2017/tigris-metros/f3.png style=&#34;width: 85%&#34;&gt;&lt;/p&gt;
&lt;p&gt;We notice a problem here - we’ve returned all tracts within the metropolitan area, but also those outside it that touch the metropolitan area’s boundary. Fortunately, &lt;strong&gt;sf&lt;/strong&gt; includes a suite of methods for spatial overlay. We’ll use the &lt;code&gt;st_within&lt;/code&gt; method to identify those tracts &lt;em&gt;within&lt;/em&gt; the boundary of the metropolitan area. Further, as the Census Bureau designs its shapefiles to align cleanly, we shouldn’t have any spatial overlay problems here.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;w1 &amp;lt;- st_within(orwa, pdx)

print(length(w1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2282&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(w1[1:5])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## integer(0)
## 
## [[2]]
## integer(0)
## 
## [[3]]
## integer(0)
## 
## [[4]]
## integer(0)
## 
## [[5]]
## [1] 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We see that the object &lt;code&gt;w1&lt;/code&gt; is a list with the same length as our &lt;code&gt;orwa&lt;/code&gt; data frame. Values either are length-0 integers - representing tracts that are not within the metro area - or &lt;code&gt;1&lt;/code&gt;, representing tracts that are. In turn, we can use &lt;strong&gt;purrr&lt;/strong&gt; to convert this to a logical vector and subset our data accordingly.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;w2 &amp;lt;- map_lgl(w1, function(x) {
  if (length(x) == 1) {
    return(TRUE)
  } else {
    return(FALSE)
  }
})

p2 &amp;lt;- orwa[w2,]

ggplot() + 
  geom_sf(data = p2) + 
  geom_sf(data = pdx, fill = NA, color = &amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=https://walkerke.github.io/img/2017/tigris-metros/f4.png style=&#34;width: 85%&#34;&gt;&lt;/p&gt;
&lt;p&gt;Perfect! Now, let’s say you want to make this extensible to other metropolitan areas on-demand. We’ll need a function that does the following:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Takes a metropolitan area as input, and detects the states in which the metro area is located;&lt;/li&gt;
&lt;li&gt;Retrieves tracts for those states;&lt;/li&gt;
&lt;li&gt;Identifies the tracts located within the metro area’s boundary.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here’s how to do it:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;metro_tracts &amp;lt;- function(metro_name) {
  
  # First, identify which states intersect the metro area using the
  # `states` function in tigris
  st &amp;lt;- states(cb = TRUE)
  cb &amp;lt;- core_based_statistical_areas(cb = TRUE)
  metro &amp;lt;- filter(cb, grepl(metro_name, NAME))
  
  stcodes &amp;lt;- st[metro,]$STATEFP
  
  # Then, fetch the tracts, using rbind_tigris if there is more
  # than one state
  if (length(stcodes) &amp;gt; 1) {
    tr &amp;lt;- rbind_tigris(
      map(stcodes, function(x) {
        tracts(x, cb = TRUE)
      })
    )
  } else {
    tr &amp;lt;- tracts(x, cb = TRUE)
  }
  
  # Now, find out which tracts are within the metro area
  within &amp;lt;- st_within(tr, metro)
  
  within_lgl &amp;lt;- map_lgl(within, function(x) {
    if (length(x) == 1) {
      return(TRUE)
    } else {
      return(FALSE)
    }
  })
  
  # Finally, subset and return the output
  output &amp;lt;- tr[within_lgl,]
  
  return(output)
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s try it out! Here’s Chicago:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;chi &amp;lt;- metro_tracts(&amp;quot;Chicago&amp;quot;)

ggplot(chi) + geom_sf()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=https://walkerke.github.io/img/2017/tigris-metros/f5.png style=&#34;width: 85%&#34;&gt;&lt;/p&gt;
&lt;p&gt;And here’s Boston:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bos &amp;lt;- metro_tracts(&amp;quot;Boston&amp;quot;)

ggplot(bos) + geom_sf()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=https://walkerke.github.io/img/2017/tigris-metros/f6.png style=&#34;width: 85%&#34;&gt;&lt;/p&gt;



&lt;!-- BLOGDOWN-HEAD






/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title>New in the tigris package: simple features support and historic shapefiles</title>
      <link>/2017/05/tigris-v05/</link>
      <pubDate>Tue, 02 May 2017 08:00:00 +0000</pubDate>
      <author>kwalkerdata@gmail.com (Kyle Walker)</author>
      <guid>/2017/05/tigris-v05/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;p&gt;I am excited to announce that &lt;a href=&#34;https://github.com/walkerke/tigris&#34;&gt;&lt;strong&gt;tigris&lt;/strong&gt;&lt;/a&gt; 0.5 is now on CRAN. This is a major release that has been in the works for several months. Get it with &lt;code&gt;install.packages(&amp;quot;tigris&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One major new feature is support for the simple features data model via the &lt;a href=&#34;https://github.com/edzer/sfr&#34;&gt;sf R package&lt;/a&gt;. &lt;strong&gt;sf&lt;/strong&gt; allows for the representation of spatial objects in R like data frames, but with a list-column containing feature geometry. This has multiple advantages, as objects of class &lt;code&gt;sf&lt;/code&gt; accept &lt;strong&gt;tidyverse&lt;/strong&gt; functions for data wrangling and are much faster to work with. For &lt;strong&gt;tigris&lt;/strong&gt;, this means that large objects like Census blocks or national railroads are much more usable in R.&lt;/p&gt;
&lt;p&gt;To return an object of class &lt;code&gt;sf&lt;/code&gt; via &lt;strong&gt;tigris&lt;/strong&gt;, either supply the argument &lt;code&gt;class = &amp;quot;sf&amp;quot;&lt;/code&gt; or set this globally in your R session with &lt;code&gt;options(tigris_class = &amp;quot;sf&amp;quot;)&lt;/code&gt;. For example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tigris)

options(tigris_class = &amp;quot;sf&amp;quot;)

co &amp;lt;- counties(cb = TRUE)

head(co)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Simple feature collection with 6 features and 9 fields
## geometry type:  MULTIPOLYGON
## dimension:      XY
## bbox:           xmin: -88.47323 ymin: 31.18113 xmax: -85.04931 ymax: 33.00682
## epsg (SRID):    4269
## proj4string:    +proj=longlat +datum=NAD83 +no_defs
##   STATEFP COUNTYFP COUNTYNS       AFFGEOID GEOID    NAME LSAD      ALAND
## 1      01      005 00161528 0500000US01005 01005 Barbour   06 2291820706
## 2      01      023 00161537 0500000US01023 01023 Choctaw   06 2365954971
## 3      01      035 00161543 0500000US01035 01035 Conecuh   06 2201896058
## 4      01      051 00161551 0500000US01051 01051  Elmore   06 1601876535
## 5      01      065 00161558 0500000US01065 01065    Hale   06 1667804583
## 6      01      109 00161581 0500000US01109 01109    Pike   06 1740741211
##     AWATER                       geometry
## 1 50864677 MULTIPOLYGON(((-85.748032 3...
## 2 19059247 MULTIPOLYGON(((-88.473227 3...
## 3  6643480 MULTIPOLYGON(((-87.427204 3...
## 4 99850740 MULTIPOLYGON(((-86.413335 3...
## 5 32525874 MULTIPOLYGON(((-87.870464 3...
## 6  2336975 MULTIPOLYGON(((-86.199408 3...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;geo_join&lt;/code&gt; and &lt;code&gt;rbind_tigris&lt;/code&gt; still work with objects of class &lt;code&gt;sf&lt;/code&gt;; however, you can use the &lt;code&gt;*_join&lt;/code&gt; functions from the tidyverse as well.&lt;/p&gt;
&lt;p&gt;The second major new feature is support for historic shapefiles going back to 1990. Historical data are available for the &lt;code&gt;states&lt;/code&gt;, &lt;code&gt;counties&lt;/code&gt;, &lt;code&gt;tracts&lt;/code&gt;, and &lt;code&gt;block_groups&lt;/code&gt; functions, and I’ve re-factored much of &lt;strong&gt;tigris&lt;/strong&gt;’s code to easily accommodate other geographies if requested by users.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(purrr)

options(tigris_class = &amp;quot;sp&amp;quot;)

par(mfrow = c(1, 3))

walk(c(1990, 2000, 2010), function(year) {
  plot(tracts(&amp;quot;TX&amp;quot;, &amp;quot;Denton&amp;quot;, cb = TRUE, year = year), 
       main = paste0(&amp;quot;Census tracts in Denton County, &amp;quot;, 
                     as.character(year)))
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;#####../content/post/tigris-v05_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;My motivation for these updates is twofold. First, I’m working on a new package called &lt;strong&gt;tidycensus&lt;/strong&gt; that will integrate &lt;strong&gt;tigris&lt;/strong&gt; with the decennial Census and American Community Survey APIs. This package will allow R users to return integrated spatial and demographic datasets as &lt;code&gt;sf&lt;/code&gt; objects in one function call, and will be designed to work seamlessly within the tidyverse. Second, I’m starting a book project this summer called &lt;em&gt;Analyzing the US Census with R&lt;/em&gt;. The book will cover Census data acquisition and wrangling; spatial modeling with Census data; and working with Census microdata from the &lt;a href=&#34;https://www.ipums.org/&#34;&gt;Integrated Public Use Microdata Series&lt;/a&gt;, all within R. Look for updates on both projects in this space!&lt;/p&gt;
&lt;p&gt;If you are interested in supporting the development of these projects, I encourage you to hire me for a workshop on these topics or to consult on your next project. Check out &lt;a href=&#34;https://walkerke.github.io/services/&#34;&gt;the Services page&lt;/a&gt; for information on how we can get started.&lt;/p&gt;



&lt;!-- BLOGDOWN-HEAD






/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
  </channel>
</rss>